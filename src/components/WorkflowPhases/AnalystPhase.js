// src/components/WorkflowPhases/AnalystPhase.js
// ’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ÷É’∏÷Ç’¨’´ ’¢’°’≤’°’§÷Ä’´’π - ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥ ÷á ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂

import React from 'react';
import { useData } from '../../context/DataContext';
import { PhaseCard } from '../UI/Card';
import Button from '../UI/Button';
import Alert from '../UI/Alert';
import { getDataTypeLabel } from '../../utils/dataHelpers';

/**
 * AnalystPhase ’¢’°’≤’°’§÷Ä’´’π - ’æ’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ’°’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ÷É’∏÷Ç’¨
 * ’ä’°’ø’°’Ω’≠’°’∂’°’ø’∏÷Ç ’ß ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’¥’°’∂ ÷á ’°’º’°’ª’∂’°’µ’´’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä
 */
const AnalystPhase = () => {
    const {
        analystActive,
        currentData,
        projectName,
        dataType,
        setAnalysisWorkspace,
        setQualityMetrics
    } = useData();

    /**
     * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Ω’Ø’´’¶’¢
     * ’à÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø ÷á ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’ø’°÷Ä’°’Æ÷Ñ’´ ’°’Ø’ø’´’æ’°÷Å’∏÷Ç’¥
     */
    const startAnalysis = () => {
        if (!currentData || currentData.length === 0) {
            alert('’è’æ’µ’°’¨’∂’•÷Ä’® ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’•’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä');
            return;
        }

        // ’é’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’ø’°÷Ä’°’Æ÷Ñ’´ ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥
        setAnalysisWorkspace(true);

        // ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’¥’°’∂ ’Ω’´’¥’∏÷Ç’¨’µ’°÷Å’´’°
        setTimeout(() => {
            const qualityAnalysis = analyzeDataQuality(currentData);
            setQualityMetrics(qualityAnalysis);

            console.log('’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂ ’°’æ’°÷Ä’ø’æ’°’Æ:', qualityAnalysis);
        }, 1000);
    };

    /**
     * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’¥’°’∂ ’°’¨’£’∏÷Ä’´’©’¥
     * @param {Array} data - ’é’•÷Ä’¨’∏÷Ç’Æ’•’¨’´÷Ñ ’ø’æ’µ’°’¨’∂’•÷Ä
     * @returns {Object} ’à÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä
     */
    const analyzeDataQuality = (data) => {
        if (!data || data.length === 0) {
            return {
                completeness: 0,
                accuracy: 0,
                missingValues: 0,
                outliers: 0,
                duplicates: 0
            };
        }

        const headers = Object.keys(data[0]);
        let totalCells = 0;
        let missingCells = 0;
        let duplicateRows = 0;
        let outlierCount = 0;

        // ‘≤’°÷Å’°’Ø’°’µ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø
        data.forEach(row => {
            headers.forEach(header => {
                totalCells++;
                const value = row[header];
                if (value === null || value === undefined || value === '' || value === 'null') {
                    missingCells++;
                }
            });
        });

        // ‘ø÷Ä’Ø’∂’°’Ø’´ ’ø’∏’≤’•÷Ä’´ ’£’ø’∂’∏÷Ç’¥
        const seen = new Set();
        data.forEach(row => {
            const rowString = JSON.stringify(row);
            if (seen.has(rowString)) {
                duplicateRows++;
            } else {
                seen.add(rowString);
            }
        });

        // ’Ü’¥’°’∂’°’Ø’¥’°’∂ ’°’¨’£’∏÷Ä’´’©’¥ ’∏’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
        const numericColumns = headers.filter(header => {
            return data.some(row => {
                const value = row[header];
                return value !== null && !isNaN(parseFloat(value));
            });
        });

        numericColumns.forEach(header => {
            const values = data
                .map(row => parseFloat(row[header]))
                .filter(val => !isNaN(val));

            if (values.length > 0) {
                const mean = values.reduce((a, b) => a + b, 0) / values.length;
                const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
                const stdDev = Math.sqrt(variance);

                // Z-score ’¥’•’©’∏’§’∏’æ ’∏’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’£’ø’∂’∏÷Ç’¥
                values.forEach(val => {
                    const zScore = Math.abs((val - mean) / stdDev);
                    if (zScore > 2.5) { // 2.5 ’Ω’ø’°’∂’§’°÷Ä’ø ’∑’•’≤’¥’°’∂ ’Ω’°’∞’¥’°’∂
                        outlierCount++;
                    }
                });
            }
        });

        // ’à÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø
        const completeness = Math.max(0, Math.min(100, ((totalCells - missingCells) / totalCells) * 100));
        const accuracy = Math.max(0, Math.min(100,
            ((totalCells - missingCells - outlierCount) / totalCells) * 100
        ));

        return {
            completeness: Math.round(completeness),
            accuracy: Math.round(accuracy),
            missingValues: missingCells,
            outliers: outlierCount,
            duplicates: duplicateRows
        };
    };

    // ’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ÷É’∏÷Ç’¨’´ ’∫’°’µ’¥’°’∂’°’Ø’°’∂ ’º’•’∂’§’•÷Ä’´’∂’£
    if (!analystActive) {
        return (
            <PhaseCard
                title="’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ÷É’∏÷Ç’¨"
                icon="üî¨"
                phase="analyst"
            >
                <Alert type="info" icon="‚ÑπÔ∏è" title="’è’æ’µ’°’¨’∂’•÷Ä’® ’¢’•’º’∂’æ’∏÷Ç’¥ ’•’∂...">
                    <div>
                        ’Ñ’•’∂’•’ª’•÷Ä’® ’∫’•’ø÷Ñ ’ß ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’°’∂’∞÷Ä’°’™’•’∑’ø ’ø’æ’µ’°’¨’∂’•÷Ä’®
                    </div>
                    <div className="mt-2 text-sm">
                        <strong>’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ’£’∏÷Ä’Æ’°’º’∏÷Ç’µ’©’∂’•÷Ä’®</strong>
                        <ul className="list-disc list-inside mt-1 space-y-1">
                            <li>’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥</li>
                            <li>‘≤’°÷Å’°’Ø’°’µ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’∞’°’µ’ø’∂’°’¢’•÷Ä’∏÷Ç’¥</li>
                            <li>’à’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’¢’°÷Å’°’∞’°’µ’ø’∏÷Ç’¥</li>
                            <li>’è’æ’µ’°’¨’∂’•÷Ä’´ ’¥’°÷Ñ÷Ä’∏÷Ç’¥</li>
                        </ul>
                    </div>
                </Alert>
            </PhaseCard>
        );
    }

    return (
        <PhaseCard
            title="’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ÷É’∏÷Ç’¨"
            icon="üî¨"
            phase="analyst"
            active={true}
        >
            <div className="space-y-4">
                {/* ’ç’ø’°÷Å’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’´’∂÷Ü’∏÷Ä’¥’°÷Å’´’° */}
                <Alert type="success" icon="‚úÖ" title="’è’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’ø÷Ä’°’Ω’ø ’•’∂">
                    <div className="space-y-2">
                        <div><strong>’Ü’°’≠’°’£’´’Æ:</strong> {projectName}</div>
                        <div><strong>’è’•’Ω’°’Ø:</strong> {getDataTypeLabel(dataType)}</div>
                        <div><strong>’è’∏’≤’•÷Ä’´ ÷Ñ’°’∂’°’Ø:</strong> {currentData?.length || 0}</div>
                        <div><strong>’ç’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø:</strong> {currentData?.length > 0 ? Object.keys(currentData[0]).length : 0}</div>
                    </div>
                </Alert>

                {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’§’´’ø’∏÷Ç’¥ */}
                {currentData && currentData.length > 0 && (
                    <div className="bg-gray-50 rounded-lg p-4">
                        <h4 className="font-bold text-sm text-gray-700 mb-2">üìã ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä</h4>
                        <div className="text-xs font-mono bg-white p-2 rounded border max-h-32 overflow-auto">
                            <div className="font-bold text-blue-600">
                                {Object.keys(currentData[0]).join(' | ')}
                            </div>
                            {currentData.slice(0, 3).map((row, index) => (
                                <div key={index} className="text-gray-600">
                                    {Object.values(row).map(val => val || 'NULL').join(' | ')}
                                </div>
                            ))}
                            {currentData.length > 3 && (
                                <div className="text-gray-400 italic">
                                    ... ’•÷Ç {currentData.length - 3} ’°’µ’¨ ’ø’∏’≤
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’ø’•’≠’∂’´’Ø’°’Ø’°’∂ ’¥’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä */}
                <div className="bg-blue-50 rounded-lg p-4">
                    <h4 className="font-bold text-sm text-blue-800 mb-2">üîç ’é’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’£’∏÷Ä’Æ’®’∂’©’°÷Å’∂’•÷Ä</h4>
                    <div className="text-xs text-blue-700 space-y-1">
                        <div>‚Ä¢ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’°’¥’¢’∏’≤’ª’°’Ø’°’∂’∏÷Ç’©’µ’°’∂ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥</div>
                        <div>‚Ä¢ ’à’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’∞’°’µ’ø’∂’°’¢’•÷Ä’∏÷Ç’¥</div>
                        <div>‚Ä¢ ’ä’°’Ø’°’Ω ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥’ù ’Ω’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥</div>
                    </div>
                </div>

                {/* ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¥’•’Ø’∂’°÷Ä’Ø */}
                <div className="pt-4 border-t border-gray-200">
                    <Button
                        onClick={startAnalysis}
                        variant="analyst"
                        size="md"
                        className="w-full"
                    >
                        üî¨ ’ç’Ø’Ω’•’¨ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂’®
                    </Button>

                    {/* <div className="mt-3 text-xs text-gray-500">
                        üí° <strong>’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∫÷Ä’∏÷Å’•’Ω’® ’∂’•÷Ä’°’º’∏÷Ç’¥ ’ß:</strong>
                        <ul className="list-disc list-inside mt-1 space-y-1">
                            <li>‘ª’∂’ø’•÷Ä’°’Ø’ø’´’æ ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’ø’°÷Ä’°’Æ÷Ñ’´ ’¢’°÷Å’∏÷Ç’¥</li>
                            <li>’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø</li>
                            <li>’é’´’¶’∏÷Ç’°’¨ ’º’•’∫’∏÷Ä’ø’∂’•÷Ä’´ ’Ω’ø’•’≤’Æ’∏÷Ç’¥</li>
                            <li>’ì’∏÷Ä’±’°’£’•’ø’´ ÷É’∏÷Ç’¨’´ ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥</li>
                        </ul>
                    </div> */}
                </div>
            </div>
        </PhaseCard>
    );
};

export default AnalystPhase;