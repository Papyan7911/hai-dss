// src/components/AnalysisWorkspace/TabContents/SyntheticTab.js
// ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’ø’°’¢

import React, { useState } from 'react';
import { useData } from '../../../context/DataContext';
import { ChartCard } from '../../UI/Card';
import Button, { ButtonGroup } from '../../UI/Button';
import ProgressBar from '../../UI/ProgressBar';
import Alert from '../../UI/Alert';
import { generateSyntheticDataset } from '../../../utils/dataGenerator';
import { useFileDownload } from '../../../hooks/useFileDownload';

/**
 * SyntheticTab ’¢’°’≤’°’§÷Ä’´’π - ’Ω’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’´’∂’ø’•÷Ä÷Ü’•’µ’Ω
 * ‘π’∏÷Ç’µ’¨ ’ß ’ø’°’¨’´’Ω ’Ω’ø’•’≤’Æ’•’¨ ’°÷Ä’∞’•’Ω’ø’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’¢’°÷Ä’•’¨’°’æ’¥’°’∂ ’∞’°’¥’°÷Ä
 */
const SyntheticTab = () => {
    const {
        currentData,
        syntheticData,
        setSyntheticData,
        syntheticStatus,
        setSyntheticStatus,
        syntheticProgress,
        setSyntheticProgress,
        setExpertActive
    } = useData();

    const [generationSettings, setGenerationSettings] = useState({
        count: 50,
        method: 'statistical',
        includeNoise: true,
        preserveDistribution: true
    });

    const [previewVisible, setPreviewVisible] = useState(false);
    const { downloadFile } = useFileDownload();

    /**
     * ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ω’Ø’´’¶’¢
     */
    const startGeneration = async () => {
        if (!currentData || currentData.length === 0) {
            alert('’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’¢’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’®');
            return;
        }

        setSyntheticStatus('‘≥’•’∂’•÷Ä’°÷Å’∏÷Ç’¥...');
        setSyntheticProgress(0);

        try {
            // ’ä÷Ä’∏’£÷Ä’•’Ω’´ ’Ω’´’¥’∏÷Ç’¨’µ’°÷Å’´’°
            const progressInterval = setInterval(() => {
                setSyntheticProgress(prev => {
                    const newProgress = prev + Math.random() * 15 + 5;
                    if (newProgress >= 100) {
                        clearInterval(progressInterval);
                        return 100;
                    }
                    return newProgress;
                });
            }, 300);

            // ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥
            setTimeout(async () => {
                try {
                    const synthetic = await generateSyntheticDataset(currentData, generationSettings);
                    setSyntheticData(synthetic);
                    setSyntheticStatus(`‘±’æ’°÷Ä’ø’æ’°’Æ ‚úÖ (‘≥’•’∂’•÷Ä’°÷Å’æ’•’¨ ’ß ${synthetic.length} ’∂’∏÷Ä ’ø’∏’≤)`);
                    setSyntheticProgress(100);
                    setExpertActive(true);

                    console.log('’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä ’£’•’∂’•÷Ä’°÷Å’æ’•’¨ ’•’∂:', synthetic);
                } catch (error) {
                    console.error('’ç’´’∂’©’•’ø’´’Ø ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ω’≠’°’¨:', error);
                    setSyntheticStatus('’ç’≠’°’¨ ‚ùå (‘≥’•’∂’•÷Ä’°÷Å’∏÷Ç’¥’® ’®’∂’§’∞’°’ø’æ’•’¨ ’ß)');
                    setSyntheticProgress(0);
                }
            }, 2000);

        } catch (error) {
            console.error('‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ω’Ø’¶’¢’∂’°’æ’∏÷Ä’¥’°’∂ ’Ω’≠’°’¨:', error);
            setSyntheticStatus('’ç’≠’°’¨ ‚ùå');
            setSyntheticProgress(0);
        }
    };

    /**
     * ’Ü’°’≠’°’§’´’ø’¥’°’∂ ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥/’©’°÷Ñ÷Å’∏÷Ç’¥
     */
    const togglePreview = () => {
        setPreviewVisible(!previewVisible);
    };

    /**
     * ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∂’•÷Ä’¢’•’º’∂’∏÷Ç’¥
     */
    const downloadSyntheticData = () => {
        if (!syntheticData || syntheticData.length === 0) {
            alert('’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨');
            return;
        }

        downloadFile(syntheticData, 'synthetic_data.csv', 'csv');
    };

    /**
     * ‘ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ÷É’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂
     */
    const updateSettings = (key, value) => {
        setGenerationSettings(prev => ({
            ...prev,
            [key]: value
        }));
    };

    if (!currentData || currentData.length === 0) {
        return (
            <Alert type="warning" title="’è’æ’µ’°’¨’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨">
                ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’∞’°’¥’°÷Ä ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ’∂’°’≠ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’¢’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’®:
            </Alert>
        );
    }

    return (
        <div className="space-y-6">
            {/* ’é’•÷Ä’∂’°’£’´÷Ä */}
            <div>
                <h3 className="text-2xl font-bold text-white-800 mb-2">
                    üß¨ ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥
                </h3>
                <p className="text-white-600">
                    ‘±÷Ä’∞’•’Ω’ø’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’Ω’ø’•’≤’Æ’∏÷Ç’¥ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∏÷Ä’°’Ø’´ ’¢’°÷Ä’•’¨’°’æ’¥’°’∂ ÷á ’∂’¥’∏÷Ç’∑’´ ’π’°÷É’´ ’°’æ’•’¨’°÷Å’¥’°’∂ ’∞’°’¥’°÷Ä
                </p>
            </div>

            {/* ‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’´’∂÷Ü’∏ */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-bold text-blue-800 mb-2">üìä ‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                        <span className="text-blue-600">’è’∏’≤’•÷Ä:</span>
                        <span className="font-bold ml-2">{currentData.length}</span>
                    </div>
                    <div>
                        <span className="text-blue-600">’ç’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä:</span>
                        <span className="font-bold ml-2">{Object.keys(currentData[0]).length}</span>
                    </div>
                    <div>
                        <span className="text-blue-600">‘±’¥’¢’∏’≤’ª’∏÷Ç’©’µ’∏÷Ç’∂:</span>
                        <span className="font-bold ml-2 text-green-600">~85%</span>
                    </div>
                    <div>
                        <span className="text-blue-600">‘µ’¶’°’Ø’´ ’°÷Ä’™’•÷Ñ’∂’•÷Ä:</span>
                        <span className="font-bold ml-2">~{Math.floor(currentData.length * 0.7)}</span>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä */}
                <ChartCard
                    title="‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä"
                    subtitle="’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°÷Ä’°’¥’•’ø÷Ä’•÷Ä"
                >
                    <div className="space-y-4">
                        {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø */}
                        <div>
                            <label className="block text-sm font-bold text-white-700 mb-2">
                                ‘≥’•’∂’•÷Ä’°÷Å’æ’∏’≤ ’ø’∏’≤’•÷Ä’´ ÷Ñ’°’∂’°’Ø
                            </label>
                            <input
                                type="range"
                                min="10"
                                max="200"
                                value={generationSettings.count}
                                onChange={(e) => updateSettings('count', parseInt(e.target.value))}
                                className="w-full"
                            />
                            <div className="flex justify-between text-xs text-white-500 mt-1">
                                <span>10</span>
                                <span className="font-bold text-blue-600">{generationSettings.count}</span>
                                <span>200</span>
                            </div>
                        </div>

                        {/* ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§ */}
                        <div>
                            <label className="block text-sm font-bold text-white-700 mb-2">
                                ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’¥’•’©’∏’§
                            </label>
                            <select
                                value={generationSettings.method}
                                onChange={(e) => updateSettings('method', e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-lg"
                            >
                                <option value="statistical">üìà ’ç’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂ ’¢’°’∑’≠’∏÷Ç’¥</option>
                                <option value="pattern">üîÑ ’ï÷Ä’´’∂’°’Ø’´ ’æ’•÷Ä’°÷Ä’ø’°’§÷Ä’∏÷Ç’¥</option>
                                <option value="interpolation">üìä ‘ª’∂’ø’•÷Ä’∫’∏’¨’µ’°÷Å’´’° (’¥’´’ª’°÷Ä’Ø’∏÷Ç’¥)</option>
                                <option value="machine_learning">ü§ñ ’Ñ’•÷Ñ’•’∂’°’µ’°’Ø’°’∂ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥</option>
                            </select>
                        </div>

                        {/* ‘º÷Ä’°÷Å’∏÷Ç÷Å’´’π ’®’∂’ø÷Ä’°’∂÷Ñ’∂’•÷Ä */}
                        <div className="space-y-2">
                            <label className="flex items-center">
                                <input
                                    type="checkbox"
                                    checked={generationSettings.includeNoise}
                                    onChange={(e) => updateSettings('includeNoise', e.target.checked)}
                                    className="mr-2"
                                />
                                <span className="text-sm">‘±’æ’•’¨’°÷Å’∂’•’¨ ’´÷Ä’°’Ø’°’∂ ’°’≤’¥’∏÷Ç’Ø</span>
                            </label>

                            <label className="flex items-center">
                                <input
                                    type="checkbox"
                                    checked={generationSettings.preserveDistribution}
                                    onChange={(e) => updateSettings('preserveDistribution', e.target.checked)}
                                    className="mr-2"
                                />
                                <span className="text-sm">’ä’°’∞’∫’°’∂’•’¨ ’¢’°’∑’≠’¥’°’∂ ÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä’®</span>
                            </label>
                        </div>

                        {/* ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’Ø’∏’≥’°’Ø */}
                        <div className="pt-4 border-t border-gray-200">
                            <Button
                                onClick={startGeneration}
                                variant="success"
                                size="md"
                                className="w-full"
                                disabled={syntheticProgress > 0 && syntheticProgress < 100}
                            >
                                üöÄ ’ç’Ø’Ω’•’¨ ’£’•’∂’•÷Ä’°÷Å’∏÷Ç’¥’®
                            </Button>
                        </div>
                    </div>
                </ChartCard>

                {/* ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’∫÷Ä’∏÷Å’•’Ω */}
                <ChartCard
                    title="‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’∫÷Ä’∏÷Å’•’Ω"
                    subtitle="‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’£’•’∂’•÷Ä’°÷Å’¥’°’∂ ’æ’´’≥’°’Ø"
                >
                    <div className="space-y-4">
                        {/* ’é’´’≥’°’Ø */}
                        <div>
                            <div className="flex justify-between mb-2">
                                <span className="text-sm font-medium text-white-700">’é’´’≥’°’Ø:</span>
                                <span className="text-sm font-bold">{syntheticStatus}</span>
                            </div>
                            <ProgressBar
                                value={syntheticProgress}
                                color="blue"
                                animated={syntheticProgress > 0 && syntheticProgress < 100}
                            />
                        </div>

                        {/* ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä */}
                        {syntheticProgress > 0 && (
                            <div className="bg-gray-50 rounded-lg p-3">
                                <h5 className="font-bold text-white-700 mb-2">üìà ‘≥’•’∂’•÷Ä’°÷Å’¥’°’∂ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂</h5>
                                <div className="text-sm space-y-1">
                                    <div className="flex justify-between">
                                        <span>‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä:</span>
                                        <span className="font-medium">{currentData.length} ’ø’∏’≤</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>’Ü’∫’°’ø’°’Ø:</span>
                                        <span className="font-medium">{generationSettings.count} ’ø’∏’≤</span>
                                    </div>
                                    {syntheticData && (
                                        <div className="flex justify-between">
                                            <span>‘≥’•’∂’•÷Ä’°÷Å’æ’°’Æ:</span>
                                            <span className="font-medium text-green-600">{syntheticData.length} ’ø’∏’≤</span>
                                        </div>
                                    )}
                                    <div className="flex justify-between">
                                        <span>’Ñ’•’©’∏’§:</span>
                                        <span className="font-medium">{getMethodLabel(generationSettings.method)}</span>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* ‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä */}
                        {syntheticData && syntheticData.length > 0 && (
                            <div className="space-y-2">
                                <ButtonGroup>
                                    <Button
                                        onClick={togglePreview}
                                        variant="secondary"
                                        size="sm"
                                    >
                                        üëÄ {previewVisible ? '‘π’°÷Ñ÷Å’∂’•’¨' : '’Ü’°’≠’°’§’´’ø’∏÷Ç’¥'}
                                    </Button>

                                    <Button
                                        onClick={downloadSyntheticData}
                                        variant="success"
                                        size="sm"
                                    >
                                        üíæ ’Ü’•÷Ä’¢’•’º’∂’•’¨
                                    </Button>
                                </ButtonGroup>

                                {/* ’à÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥ */}
                                <div className="text-xs text-white-600 bg-green-50 p-2 rounded">
                                    ‚úÖ ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∞’°÷Ä’¥’°÷Ä ’•’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä
                                </div>
                            </div>
                        )}
                    </div>
                </ChartCard>
            </div>

            {/* ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’§’´’ø’∏÷Ç’¥ */}
            {previewVisible && syntheticData && syntheticData.length > 0 && (
                <ChartCard title="’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’§’´’ø’∏÷Ç’¥">
                    <SyntheticDataPreview data={syntheticData} originalData={currentData} />
                </ChartCard>
            )}

            {/* ’Ñ’•’©’∏’§’°’¢’°’∂’°’Ø’°’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä */}
            <Alert type="info" title="üß¨ ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¥’°’Ω’´’∂">
                <div className="space-y-2 text-sm">
                    <p>
                        <strong>’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’®</strong> ’°÷Ä’∞’•’Ω’ø’°’Ø’°’∂’∏÷Ä’•’∂ ’Ω’ø’•’≤’Æ’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä ’•’∂, ’∏÷Ä’∏’∂÷Ñ ’∫’°’∞’∫’°’∂’∏÷Ç’¥ ’•’∂
                        ’¢’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’Ω’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂ ’∞’°’ø’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ÷á ÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä’®:
                    </p>
                    <div>
                        <strong>’ï’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä</strong>
                        <ul className="list-disc list-inside mt-1 space-y-1">
                            <li>’ì’∏÷Ñ÷Ä ’∂’¥’∏÷Ç’∑’∂’•÷Ä’´ ’Æ’°’æ’°’¨’´ ’°’æ’•’¨’°÷Å’∏÷Ç’¥</li>
                            <li>‘≤’°÷Å’°’Ø’°’µ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’¨÷Ä’°÷Å’∏÷Ç’¥</li>
                            <li>’é’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’¥’∏’§’•’¨’∂’•÷Ä’´ ’≥’∑’ø’∏÷Ç’©’µ’°’∂ ’¢’°÷Ä’•’¨’°’æ’∏÷Ç’¥</li>
                        </ul>
                    </div>
                </div>
            </Alert>
        </div>
    );
};

/**
 * ’Ñ’•’©’∏’§’´ ’∫’´’ø’°’Ø’´ ’Ω’ø’°÷Å’∏÷Ç’¥
 */
const getMethodLabel = (method) => {
    const labels = {
        'statistical': '’ç’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂',
        'pattern': '’ï÷Ä’´’∂’°’Ø’°’µ’´’∂',
        'interpolation': '‘ª’∂’ø’•÷Ä’∫’∏’¨’µ’°÷Å’´’°',
        'machine_learning': '’Ñ’•÷Ñ’•’∂’°’µ’°’Ø’°’∂ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥'
    };
    return labels[method] || method;
};

/**
 * ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∂’°’≠’°’§’´’ø’¥’°’∂ ’¢’°’≤’°’§÷Ä’´’π
 */
const SyntheticDataPreview = ({ data, originalData }) => {
    const headers = Object.keys(data[0]);
    const previewCount = Math.min(data.length, 5);
    const originalPreviewCount = Math.min(originalData.length, 3);

    return (
        <div className="space-y-4">
            {/* ’Ä’°’¥’•’¥’°’ø’°’Ø’°’∂ ’°’≤’µ’∏÷Ç’Ω’°’Ø */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                {/* ‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä */}
                <div>
                    <h5 className="font-bold text-white-700 mb-2">üìä ‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’æ’µ’°’¨’∂’•÷Ä</h5>
                    <div className="overflow-x-auto">
                        <table className="w-full text-xs border border-gray-200 rounded">
                            <thead className="bg-gray-100">
                                <tr>
                                    {headers.map((header, index) => (
                                        <th key={index} className="p-2 text-left border-b font-medium">
                                            {header}
                                        </th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody>
                                {originalData.slice(0, originalPreviewCount).map((row, index) => (
                                    <tr key={index} className="hover:bg-gray-50">
                                        {headers.map((header, cellIndex) => (
                                            <td key={cellIndex} className="p-2 border-b">
                                                {row[header] || 'NULL'}
                                            </td>
                                        ))}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä */}
                <div>
                    <h5 className="font-bold text-white-700 mb-2">üß¨ ’ç’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä</h5>
                    <div className="overflow-x-auto">
                        <table className="w-full text-xs border border-gray-200 rounded">
                            <thead className="bg-blue-100">
                                <tr>
                                    {headers.map((header, index) => (
                                        <th key={index} className="p-2 text-left border-b font-medium text-blue-800">
                                            {header}
                                        </th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody>
                                {data.slice(0, previewCount).map((row, index) => (
                                    <tr key={index} className="hover:bg-blue-50">
                                        {headers.map((header, cellIndex) => (
                                            <td key={cellIndex} className="p-2 border-b text-blue-700">
                                                {row[header] || 'NULL'}
                                            </td>
                                        ))}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            {/* ’ç’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂ ’∞’°’¥’•’¥’°’ø’∏÷Ç’©’µ’∏÷Ç’∂ */}
            <div className="bg-gray-50 rounded-lg p-4">
                <h5 className="font-bold text-white-700 mb-3">üìà ’ç’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂ ’∞’°’¥’•’¥’°’ø’∏÷Ç’©’µ’∏÷Ç’∂</h5>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div className="text-center">
                        <div className="font-bold text-white-800">{originalData.length}</div>
                        <div className="text-white-600">‘≤’∂÷Ö÷Ä’´’∂’°’Ø ’ø’∏’≤’•÷Ä</div>
                    </div>
                    <div className="text-center">
                        <div className="font-bold text-blue-600">{data.length}</div>
                        <div className="text-white-600">’ç’´’∂’©’•’ø’´’Ø ’ø’∏’≤’•÷Ä</div>
                    </div>
                    <div className="text-center">
                        <div className="font-bold text-green-600">
                            {((data.length / originalData.length) * 100).toFixed(0)}%
                        </div>
                        <div className="text-white-600">‘±’æ’•’¨’°÷Å’∏÷Ç’¥</div>
                    </div>
                    <div className="text-center">
                        <div className="font-bold text-purple-600">
                            {originalData.length + data.length}
                        </div>
                        <div className="text-white-600">‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’æ’°’¨</div>
                    </div>
                </div>
            </div>

            {/* ‘≥’∂’°’∞’°’ø’¥’°’∂ ’´’∂’§’´’Ø’°’ø’∏÷Ä’∂’•÷Ä */}
            <div className="flex flex-wrap gap-2">
                <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                    ‚úÖ ‘≤’°’∑’≠’∏÷Ç’¥’® ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß
                </span>
                <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                    üîÑ ’å’•’°’¨’´’Ω’ø’´’Ø ’¢’∂’∏÷Ç’©’°’£’´÷Ä
                </span>
                <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
                    üéØ ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’∫’°’ø÷Ä’°’Ω’ø
                </span>
            </div>
        </div>
    );
};

export default SyntheticTab;