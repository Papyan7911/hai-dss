// src/components/AnalysisWorkspace/TabContents/AnalysisTab.js
// ‘±’º’°’ª’∂’°’µ’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’ø’°’¢

import React, { useEffect } from 'react';
import { useData } from '../../../context/DataContext';
import { ChartCard, InfoCard } from '../../UI/Card';
import ProgressBar from '../../UI/ProgressBar';
import Alert from '../../UI/Alert';
import { analyzeDataset } from '../../../utils/dataHelpers';

/**
 * AnalysisTab ’¢’°’≤’°’§÷Ä’´’π - ’°’º’°’ª’∂’°’µ’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂
 * ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’ß ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä’® ÷á ’∞’´’¥’∂’°’Ø’°’∂ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®
 */
const AnalysisTab = () => {
    const {
        currentData,
        qualityMetrics,
        setQualityMetrics,
        projectName,
        dataType
    } = useData();

    /**
     * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’°’æ’ø’∏’¥’°’ø ’Ω’Ø’´’¶’¢
     */
    useEffect(() => {
        if (currentData && currentData.length > 0 && qualityMetrics.completeness === 0) {
            // ’Ä’•’º’°’∂’°’Ø’°’º’°’µ’´’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂
            setTimeout(() => {
                const analysis = analyzeDataset(currentData);

                // ’à÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø
                const completeness = Math.round(analysis.overallCompleteness || 0);
                const accuracy = Math.min(100, completeness + Math.floor(Math.random() * 20) - 5);
                const missingValues = Math.floor((100 - completeness) * currentData.length * Object.keys(currentData[0]).length / 100);
                const outliers = Math.floor(Math.random() * 10) + 2;
                const duplicates = Math.floor(Math.random() * 5) + 1;

                setQualityMetrics({
                    completeness,
                    accuracy,
                    missingValues,
                    outliers,
                    duplicates,
                    detailedAnalysis: analysis
                });
            }, 1500);
        }
    }, [currentData, qualityMetrics.completeness, setQualityMetrics]);

    if (!currentData || currentData.length === 0) {
        return (
            <Alert type="warning" title="’è’æ’µ’°’¨’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨">
                ‘±’º’°’ª’∂’°’µ’´’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä ’°’∂’∞÷Ä’°’™’•’∑’ø ’ß ’∂’°’≠ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’® ’¥’•’∂’•’ª’•÷Ä’´ ÷É’∏÷Ç’¨’∏÷Ç’¥:
            </Alert>
        );
    }

    const headers = Object.keys(currentData[0]);
    const datasetInfo = qualityMetrics.detailedAnalysis;

    return (
        <div className="space-y-6">
            {/* ’é’•÷Ä’∂’°’£’´÷Ä */}
            <div>
                <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    üìà ‘±’º’°’ª’∂’°’µ’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂
                </h3>
                <p className="text-gray-600">
                    ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´, ’°’¥’¢’∏’≤’ª’°’Ø’°’∂’∏÷Ç’©’µ’°’∂ ÷á ’æ’´’≥’°’Ø’°’£÷Ä’°’Ø’°’∂ ’¢’∂’∏÷Ç’©’°’£÷Ä’•÷Ä’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥
                </p>
            </div>

            {/* ’Ü’°’≠’°’£’Æ’´ ’´’∂÷Ü’∏ */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <InfoCard
                        title="’Ü’°’≠’°’£’´’Æ"
                        value={projectName || '‘±’∂’°’∂’∏÷Ç’∂'}
                        icon="üìÅ"
                        color="blue"
                    />
                    <InfoCard
                        title="’è’æ’µ’°’¨’∂’•÷Ä’´ ’ø’•’Ω’°’Ø"
                        value={getDataTypeLabel(dataType)}
                        icon="üìä"
                        color="green"
                    />
                    <InfoCard
                        title="’è’∏’≤’•÷Ä’´ ÷Ñ’°’∂’°’Ø"
                        value={currentData.length}
                        icon="üìù"
                        color="purple"
                    />
                    <InfoCard
                        title="’ç’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä"
                        value={headers.length}
                        icon="üìã"
                        color="orange"
                    />
                </div>
            </div>

            {/* ’à÷Ä’°’Ø’´ ’¥’•’ø÷Ä’´’Ø’∂’•÷Ä */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥ */}
                <ChartCard
                    title="’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥"
                    subtitle="‘±’¥’¢’∏’≤’ª’°’Ø’°’∂’∏÷Ç’©’µ’°’∂ ÷á ’≥’∑’¥’°÷Ä’ø’∏÷Ç’©’µ’°’∂ ’π’°÷É’°’∂’´’∑’∂’•÷Ä’®"
                >
                    <div className="space-y-4">
                        <ProgressBar
                            value={qualityMetrics.completeness}
                            label="‘±’¥’¢’∏’≤’ª’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂"
                            color="green"
                            showValue={true}
                            animated={true}
                        />

                        <ProgressBar
                            value={qualityMetrics.accuracy}
                            label="’É’∑’¥’°÷Ä’ø’∏÷Ç’©’µ’∏÷Ç’∂"
                            color="blue"
                            showValue={true}
                            animated={true}
                        />

                        {/* ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∂’°’∞’°’ø’∏÷Ç’¥ */}
                        <div className="pt-3 border-t border-gray-200">
                            <div className="flex justify-between items-center">
                                <span className="font-medium text-gray-700">‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∂’°’∞’°’ø’∏÷Ç’¥:</span>
                                <span className={`font-bold ${getQualityScoreColor(getQualityScore())}`}>
                                    {getQualityLabel(getQualityScore())}
                                </span>
                            </div>
                        </div>
                    </div>
                </ChartCard>

                {/* ’Ä’°’µ’ø’∂’°’¢’•÷Ä’æ’°’Æ ’≠’∂’§’´÷Ä’∂’•÷Ä */}
                <ChartCard
                    title="’Ä’°’µ’ø’∂’°’¢’•÷Ä’æ’°’Æ ’≠’∂’§’´÷Ä’∂’•÷Ä"
                    subtitle="’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’´ ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"
                >
                    <div className="space-y-3">
                        <DataIssueItem
                            label="‘≤’°÷Å’°’Ø’°’µ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä"
                            value={qualityMetrics.missingValues}
                            total={currentData.length * headers.length}
                            color="yellow"
                            icon="‚ö†Ô∏è"
                        />

                        <DataIssueItem
                            label="’à’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä"
                            value={qualityMetrics.outliers}
                            total={currentData.length}
                            color="orange"
                            icon="üìä"
                        />

                        <DataIssueItem
                            label="‘ø÷Ä’Ø’∂’°’Ø’´ ’£÷Ä’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä"
                            value={qualityMetrics.duplicates}
                            total={currentData.length}
                            color="red"
                            icon="üîÑ"
                        />
                    </div>
                </ChartCard>
            </div>

            {/* ’Ñ’°’∂÷Ä’°’¥’°’Ω’∂ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ */}
            {datasetInfo && !datasetInfo.isEmpty && (
                <ChartCard title="’Ñ’°’∂÷Ä’°’¥’°’Ω’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {datasetInfo.columns.slice(0, 6).map((column, index) => (
                            <ColumnAnalysisCard key={index} column={column} />
                        ))}
                    </div>

                    {datasetInfo.columns.length > 6 && (
                        <div className="mt-4 text-center">
                            <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                ’è’•’Ω’∂’•’¨ ’¢’∏’¨’∏÷Ä {datasetInfo.columns.length} ’Ω’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä’® ‚Üí
                            </button>
                        </div>
                    )}
                </ChartCard>
            )}

            {/* ’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥ */}
            <Alert
                type={getAnalysisAlertType()}
                title="’é’•÷Ä’¨’∏÷Ç’Æ’°’¢’°’∂’´ ’£’∂’°’∞’°’ø’∏÷Ç’¥"
                icon="üî¨"
            >
                <div>
                    {getAnalysisRecommendation()}
                </div>
                <div className="mt-2 text-sm">
                    <strong>’Ä’°’ª’∏÷Ä’§ ÷Ñ’°’µ’¨’•÷Ä</strong>
                    <ul className="list-disc list-inside mt-1 space-y-1">
                        {getNextStepsRecommendations().map((step, index) => (
                            <li key={index}>{step}</li>
                        ))}
                    </ul>
                </div>
            </Alert>
        </div>
    );

    /**
     * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’ø’•’Ω’°’Ø’´ ’∫’´’ø’°’Ø
     */
    function getDataTypeLabel(value) {
        const labels = {
            'demographic': '‘¥’•’¥’∏’£÷Ä’°÷Ü’´’°’Ø’°’∂',
            'healthcare': '‘±’º’∏’≤’ª’°’∫’°’∞’°’Ø’°’∂',
            'quality_of_life': '‘ø’µ’°’∂÷Ñ’´ ’∏÷Ä’°’Ø',
            'educational': '‘ø÷Ä’©’°’Ø’°’∂'
        };
        return labels[value] || '’â’Ω’°’∞’¥’°’∂’æ’°’Æ';
    }

    /**
     * ’à÷Ä’°’Ø’´ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∂’°’∞’°’ø’°’Ø’´ ’∞’°’∑’æ’°÷Ä’Ø
     */
    function getQualityScore() {
        return Math.round((qualityMetrics.completeness + qualityMetrics.accuracy) / 2);
    }

    /**
     * ’à÷Ä’°’Ø’´ ’∫’´’ø’°’Ø
     */
    function getQualityLabel(score) {
        if (score >= 85) return '‘≥’•÷Ä’°’¶’°’∂÷Å';
        if (score >= 70) return '‘º’°’æ';
        if (score >= 55) return '’Ñ’´’ª’´’∂';
        return '’ë’°’Æ÷Ä';
    }

    /**
     * ’à÷Ä’°’Ø’´ ’£’∏÷Ç’µ’∂
     */
    function getQualityScoreColor(score) {
        if (score >= 85) return 'text-green-600';
        if (score >= 70) return 'text-blue-600';
        if (score >= 55) return 'text-yellow-600';
        return 'text-red-600';
    }

    /**
     * ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Æ’°’∂’∏÷Ç÷Å’¥’°’∂ ’ø’•’Ω’°’Ø
     */
    function getAnalysisAlertType() {
        const score = getQualityScore();
        if (score >= 70) return 'success';
        if (score >= 55) return 'warning';
        return 'danger';
    }

    /**
     * ’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’º’•’Ø’∏’¥’•’∂’§’°÷Å’´’°
     */
    function getAnalysisRecommendation() {
        const score = getQualityScore();
        if (score >= 85) {
            return '’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’® ’£’•÷Ä’°’¶’°’∂÷Å ’ß: ‘ø’°÷Ä’•’¨’´ ’ß ’°’∂÷Å’∂’•’¨ ’Ω’´’∂’©’•’ø’´’Ø ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’£’•’∂’•÷Ä’°÷Å’¥’°’∂’® ÷á ’≠’∏÷Ä’°÷Å’æ’°’Æ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂’®:';
        }
        if (score >= 70) {
            return '’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’® ’¢’°’æ’°÷Ä’°÷Ä ’ß ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä: ‘Ω’∏÷Ä’∞’∏÷Ç÷Ä’§ ’ß ’ø÷Ä’æ’∏÷Ç’¥ ’Ø’´÷Ä’°’º’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¥’°÷Ñ÷Ä’¥’°’∂ ’ø’•’≠’∂’´’Ø’°’∂’•÷Ä:';
        }
        if (score >= 55) {
            return '’è’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’∞’°’∂’ª’∏÷Ç’¥ ’•’∂ ’∂’°’≠’∂’°’Ø’°’∂ ’¥’∑’°’Ø’∏÷Ç’¥: ‘±’∂’∞÷Ä’°’™’•’∑’ø ’ß ’¨÷Ä’°÷Å’∏÷Ç÷Å’´’π ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’æ’°÷Ñ’∏÷Ç’¥ ’Ø’°’¥ ’¥’°÷Ñ÷Ä’∏÷Ç’¥:';
        }
        return '’è’æ’µ’°’¨’∂’•÷Ä’´ ’∏÷Ä’°’Ø’® ÷Å’°’Æ÷Ä ’ß: ‘±’∂’∞÷Ä’°’™’•’∑’ø ’ß ’æ’•÷Ä’°’∂’°’µ’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’æ’°÷Ñ’¥’°’∂ ’¥’•’©’∏’§’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®:';
    }

    /**
     * ’Ä’°’ª’∏÷Ä’§ ÷Ñ’°’µ’¨’•÷Ä’´ ’º’•’Ø’∏’¥’•’∂’§’°÷Å’´’°’∂’•÷Ä
     */
    function getNextStepsRecommendations() {
        const score = getQualityScore();
        const steps = [];

        if (qualityMetrics.missingValues > currentData.length * 0.1) {
            steps.push('‘º÷Ä’°÷Å’∂’•’¨ ’¢’°÷Å’°’Ø’°’µ’∏’≤ ’°÷Ä’™’•÷Ñ’∂’•÷Ä’® ’Ω’´’∂’©’•’ø’´’Ø ’£’•’∂’•÷Ä’°÷Å’¥’°’¥’¢');
        }

        if (qualityMetrics.outliers > 5) {
            steps.push('’é’•÷Ä’¨’∏÷Ç’Æ’•’¨ ’∏’π ’Ω’ø’°’∂’§’°÷Ä’ø ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´ ’∫’°’ø’≥’°’º’∂’•÷Ä’®');
        }

        if (score >= 70) {
            steps.push('‘±’∂÷Å’∂’•’¨ ’°’∂’∏÷Ä’∏’∑ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂’®');
            steps.push('‘ª÷Ä’°’Ø’°’∂’°÷Å’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’Ø’¨’°’Ω’ø’•÷Ä’°÷Å’∏÷Ç’¥');
        } else {
            steps.push('‘ø’´÷Ä’°’º’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¥’°÷Ñ÷Ä’¥’°’∂ ’°’¨’£’∏÷Ä’´’©’¥’∂’•÷Ä');
            steps.push('’ç’ø’∏÷Ç’£’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’∞’°’æ’°÷Ñ’¥’°’∂ ’£’∏÷Ä’Æ’®’∂’©’°÷Å’®');
        }

        return steps;
    }
};

/**
 * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’§÷Ä’¥’°’∂ ’¢’°’≤’°’§÷Ä’´’π
 */
const DataIssueItem = ({ label, value, total, color, icon }) => {
    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;

    return (
        <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
                <span>{icon}</span>
                <span className="text-gray-700">{label}:</span>
            </div>
            <div className="text-right">
                <div className="font-bold text-gray-800">{value}</div>
                <div className={`text-xs text-${color}-600`}>
                    {percentage}% ’Æ’°’æ’°’¨’´÷Å
                </div>
            </div>
        </div>
    );
};

/**
 * ’ç’µ’∏÷Ç’∂’°’Ø’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ÷Ñ’°÷Ä’ø
 */
const ColumnAnalysisCard = ({ column }) => {
    if (!column) return null;

    return (
        <div className="bg-gray-50 rounded-lg p-3 border">
            <div className="font-medium text-gray-800 mb-2 truncate" title={column.columnName}>
                {column.columnName}
            </div>

            <div className="space-y-1 text-xs text-gray-600">
                <div className="flex justify-between">
                    <span>’è’•’Ω’°’Ø:</span>
                    <span className="font-medium">{getTypeLabel(column.dominantType)}</span>
                </div>

                <div className="flex justify-between">
                    <span>‘±’¥’¢’∏’≤’ª’∏÷Ç’©’µ’∏÷Ç’∂:</span>
                    <span className="font-medium">
                        {Math.round(100 - column.missingPercentage)}%
                    </span>
                </div>

                <div className="flex justify-between">
                    <span>‘µ’¶’°’Ø’´ ’°÷Ä’™’•÷Ñ’∂’•÷Ä:</span>
                    <span className="font-medium">{column.uniqueCount}</span>
                </div>

                {/* ’ç’ø’°’ø’´’Ω’ø’´’Ø’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä ’©’æ’°’µ’´’∂ ’Ω’µ’∏÷Ç’∂’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä */}
                {column.statistics && (
                    <>
                        <div className="flex justify-between">
                            <span>’Ñ’´’ª’´’∂:</span>
                            <span className="font-medium">{column.statistics.mean.toFixed(1)}</span>
                        </div>
                        <div className="flex justify-between">
                            <span>’Ñ’´’∂-’Ñ’°÷Ñ’Ω:</span>
                            <span className="font-medium">
                                {column.statistics.min}-{column.statistics.max}
                            </span>
                        </div>
                    </>
                )}
            </div>
        </div>
    );
};

/**
 * ’è’æ’µ’°’¨’∂’•÷Ä’´ ’ø’´’∫’´ ’∫’´’ø’°’Ø’´ ’Ω’ø’°÷Å’∏÷Ç’¥
 */
const getTypeLabel = (type) => {
    const labels = {
        'text': '’è’•÷Ñ’Ω’ø',
        'number': '‘π’´’æ',
        'integer': '‘±’¥’¢’∏’≤’ª',
        'float': '’è’°’Ω’∂’∏÷Ä’§’°’Ø’°’∂',
        'date': '‘±’¥’Ω’°’©’´’æ',
        'boolean': '’è÷Ä’°’¥’°’¢’°’∂’°’Ø’°’∂',
        'email': '‘∑’¨. ÷É’∏’Ω’ø',
        'url': 'URL',
        'empty': '‘¥’°’ø’°÷Ä’Ø'
    };
    return labels[type] || type;
};

export default AnalysisTab;